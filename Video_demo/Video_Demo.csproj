<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net8.0-android;net8.0-ios</TargetFrameworks>
    <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net8.0-windows10.0.20348.0</TargetFrameworks>
    <!-- Uncomment to also build the tizen app. You will need to install tizen by following this: https://github.com/Samsung/Tizen.NET -->
    <!-- <TargetFrameworks>$(TargetFrameworks);net8.0-tizen</TargetFrameworks> -->

    <!-- Note for MacCatalyst:
    The default runtime is maccatalyst-x64, except in Release config, in which case the default is maccatalyst-x64;maccatalyst-arm64.
    When specifying both architectures, use the plural <RuntimeIdentifiers> instead of the singular <RuntimeIdentifier>.
    The Mac App Store will NOT accept apps with ONLY maccatalyst-arm64 indicated;
    either BOTH runtimes must be indicated or ONLY macatalyst-x64. -->
    <!-- For example: <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> -->

    <OutputType>Exe</OutputType>
    <UseMaui>true</UseMaui>
    <SingleProject>true</SingleProject>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>

    <!-- Display name -->
    <ApplicationTitle>Video_Demo</ApplicationTitle>

    <!-- App Identifier -->
    <ApplicationId>Video.Demo.Repro</ApplicationId>

    <!-- Versions -->
    <ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
    <ApplicationVersion>1</ApplicationVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.19041.0</SupportedOSPlatformVersion>
    <TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.19041.0</TargetPlatformMinVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">11.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">21.0</SupportedOSPlatformVersion>
  </PropertyGroup>
  
  <PropertyGroup Condition="$(TargetFramework.Contains('android'))">
    <AndroidMinSdkVersion>21</AndroidMinSdkVersion>   <!-- Minimum API level -->
    <AndroidTargetSdkVersion>34</AndroidTargetSdkVersion>  <!-- Target API level -->
    <AndroidPackageFormat>apk</AndroidPackageFormat>
    <AndroidUseSharedRuntime>true</AndroidUseSharedRuntime>
    <EmbedAssembliesIntoApk>True</EmbedAssembliesIntoApk>
  </PropertyGroup>

  <PropertyGroup Condition="$(TargetFramework.Contains('ios'))">
    <CreatePackage>false</CreatePackage>
    <ProvisioningType>manual</ProvisioningType>
    <CodesignKey>iPhone Developer</CodesignKey>
  </PropertyGroup>

  <ItemGroup>
    <!-- App Icon -->
    <MauiIcon Include="Resources\AppIcon\appicon.svg" ForegroundFile="Resources\AppIcon\appiconfg.svg" Color="#512BD4" />

    <!-- Splash Screen -->
    <MauiSplashScreen Include="Resources\Splash\splash.svg" Color="#512BD4" BaseSize="128,128" />

    <!-- Images -->
    <MauiImage Include="Resources\Images\*" />
    <MauiImage Update="Resources\Images\dotnet_bot.png" Resize="True" BaseSize="300,185" />

    <!-- Custom Fonts -->
    <MauiFont Include="Resources\Fonts\*" />

    <!-- Raw Assets (also remove the "Resources\Raw" prefix) -->
    <MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="CommunityToolkit.Maui" Version="8.0.1" />
    <PackageReference Include="CommunityToolkit.Mvvm" Version="8.2.2" />
    <PackageReference Include="Microsoft.Maui.Controls" Version="8.0.100" />
    <PackageReference Include="Microsoft.Maui.Controls.Compatibility" Version="8.0.100" />
    <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="8.0.0" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>

  <ItemGroup Condition="$(TargetFramework.Contains('ios'))">
    <PackageReference Include="VideoLAN.LibVLC.iOS" Version="3.3.18" />
  </ItemGroup>

  <ItemGroup Condition="$(TargetFramework.Contains('android'))">
    <PackageReference Include="VideoLAN.LibVLC.Android" Version="3.5.3" />
  </ItemGroup>

  <ItemGroup Condition="$(TargetFramework.Contains('windows'))">
    <PackageReference Include="VideoLAN.LibVLC.Windows" Version="3.0.18" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Camera.MAUI.Ex\Camera.MAUI.Ex.csproj" />
    <ProjectReference Include="..\Camera.MAUI\Camera.MAUI.csproj" />
  </ItemGroup>
  
  <ItemGroup>
    <MauiXaml Update="Views\UploadTestPage.xaml">
      <Generator>MSBuild:Compile</Generator>
    </MauiXaml>
  </ItemGroup>

  <!-- Make sure any old temp files are removed-->
  <Target Name="CustomClean" AfterTargets="Clean" Condition="$([MSBuild]::IsOSPlatform('Windows'))">
    <Message Text="Running custom clean up... $(ProjectDir)bin" />
    <Exec Command="rmdir /s /q $(ProjectDir)bin" />
    <Message Text="Running custom clean up... $(ProjectDir)obj" />
    <Exec Command="rmdir /s /q $(ProjectDir)obj" />
  </Target>
  <Target Name="CustomCleanMac" AfterTargets="Clean" Condition="$([MSBuild]::IsOSPlatform('OSX'))">
    <Message Text="Running custom clean up... $(ProjectDir)bin" />
    <Exec Command="rm -R $(ProjectDir)bin" ContinueOnError="true" />
    <Message Text="Running custom clean up... $(ProjectDir)obj" />
    <Exec Command="rm -R $(ProjectDir)obj" ContinueOnError="true" />
  </Target>
</Project>
